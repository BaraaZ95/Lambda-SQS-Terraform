name: "Build, Test, and Terraform Apply"

on:
  push:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "Debugging"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "Lambda-Terraform"
  CONFIG_DIRECTORY: "./"

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    - name: Run Ruff (linting and formatting)
      run: |
        ruff check .
        ruff format --check .
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: v0.44.1
    - name: Run TFLint
      run: tflint
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Check Terraform formatting
      run: terraform fmt -check -recursive
    - name: Format Python code with Ruff
      if: failure()
      run: ruff format .
    - name: Format Terraform code
      if: failure()
      run: terraform fmt -recursive

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r lambda/requirements.txt
        pip install pytest
    - name: Run tests
      run: pytest -vv tests/test_lambda_function.py
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      LAYER_S3_KEY: ${{ steps.set-layer-key.outputs.LAYER_S3_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r lambda/requirements.txt

      - name: Build Lambda layer
        run: |
          chmod +x ./build_layer.sh
          ./build_layer.sh
        
      - name: List directory contents
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          echo "Content of lambda directory:"
          ls -la lambda/
          if [ -f "lambda-layer.zip" ]; then
            echo "lambda-layer.zip exists in current directory"
            ls -l lambda-layer.zip
          else
            echo "lambda-layer.zip does not exist in current directory"
            echo "Searching for lambda-layer.zip:"
            find . -name lambda-layer.zip
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Upload to S3
        run: |
          ZIP_FILE=$(find . -name lambda-layer.zip)
          if [ -n "$ZIP_FILE" ]; then
            aws s3 cp "$ZIP_FILE" s3://${{ secrets.AWS_S3_BUCKET_NAME }}/lambda-layer-${{ github.sha }}.zip
            echo "Upload successful"
          else
            echo "lambda-layer.zip not found"
            exit 1
          fi

      - name: Set layer S3 key as output
        id: set-layer-key
        run: echo "LAYER_S3_KEY=lambda-layer-${{ github.sha }}.zip" >> $GITHUB_OUTPUT
      - name: Debug - Print S3 Key
        run: | 
          echo "Set S3 Key: ${{ steps.set-layer-key.outputs.LAYER_S3_KEY }}"
      
  

  terraform:
    needs: build-and-deploy
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
          -var="lambda_layer_s3_key=${{ needs.build-and-deploy.outputs.LAYER_S3_KEY }}"